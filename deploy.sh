#!/bin/bash

# deploy.sh - Deployment script for Papier application
# This script handles both development and production deployments

# Define colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Function to display help message
show_help() {
  echo -e "${GREEN}Papier Deployment Script${NC}"
  echo -e "Usage: ./deploy.sh [options]"
  echo -e "Options:"
  echo -e "  --env [development|production]   Set deployment environment (default: development)"
  echo -e "  --domain [domain]                Domain name for production (e.g., papier.example.com)"
  echo -e "  --email [email]                  Email for Let's Encrypt (required for production)"
  echo -e "  --help                           Show this help message"
}

# Default values
ENVIRONMENT="production"
DOMAIN="ricardoadorno.com"
EMAIL="ricardo.castrorc1998@gmail.com"

# Parse command-line arguments
while [ $# -gt 0 ]; do
  case "$1" in
    --env)
      ENVIRONMENT="$2"
      shift 2
      ;;
    --domain)
      DOMAIN="$2"
      shift 2
      ;;
    --email)
      EMAIL="$2"
      shift 2
      ;;
    --help)
      show_help
      exit 0
      ;;
    *)
      echo -e "${RED}Error: Unknown option $1${NC}"
      show_help
      exit 1
      ;;
  esac
done

# Validate inputs for production environment
if [ "$ENVIRONMENT" = "production" ]; then
  if [ -z "$DOMAIN" ]; then
    echo -e "${RED}Error: Domain name is required for production deployment${NC}"
    echo -e "${YELLOW}Use: ./deploy.sh --env production --domain yourdomain.com --email your@email.com${NC}"
    exit 1
  fi
  
  if [ -z "$EMAIL" ]; then
    echo -e "${RED}Error: Email is required for Let's Encrypt certificates${NC}"
    echo -e "${YELLOW}Use: ./deploy.sh --env production --domain yourdomain.com --email your@email.com${NC}"
    exit 1
  fi
fi

# Create .env file if it doesn't exist
if [ ! -f .env ]; then
  echo -e "${YELLOW}Creating .env file...${NC}"
  cat > .env << EOL
NODE_ENV=${ENVIRONMENT}
POSTGRES_USER=papier
POSTGRES_PASSWORD=$(openssl rand -base64 16)
POSTGRES_DB=papier
COMPOSE_PROJECT_NAME=papier
EOL
  echo -e "${GREEN}.env file created with random secure password${NC}"
else
  # Update environment variables in .env
  echo -e "${YELLOW}Updating environment variables...${NC}"
  sed -i "s/^NODE_ENV=.*/NODE_ENV=$ENVIRONMENT/g" .env
fi

# Create required directories
mkdir -p ssl certbot-webroot certbot

# Function to set up SSL certificates
setup_ssl() {
  if [ "$ENVIRONMENT" = "development" ]; then
    echo -e "${YELLOW}Development environment: Using self-signed certificates...${NC}"
    # Certificates will be generated by the nginx container
  else
    echo -e "${YELLOW}Production environment: Setting up Let's Encrypt certificates...${NC}"
    
    # Update Nginx configuration
    echo -e "${YELLOW}Updating Nginx configuration for production...${NC}"
    sed -i "s/server_name localhost;/server_name $DOMAIN;/g" nginx.conf
    
    # Ensure the /.well-known/acme-challenge/ location is properly configured
    grep -q "/.well-known/acme-challenge/" nginx.conf || echo -e "${RED}Warning: /.well-known/acme-challenge/ location not found in nginx.conf${NC}"
    
    # Uncomment HSTS header for production
    sed -i 's/# add_header Strict-Transport-Security/add_header Strict-Transport-Security/g' nginx.conf
    
    # Create Docker network if it doesn't exist
    echo -e "${YELLOW}Creating Docker network...${NC}"
    docker network create papier-network || true
    
    # Start Nginx for the HTTP challenge
    echo -e "${YELLOW}Starting Nginx to handle Let's Encrypt HTTP challenge...${NC}"
    docker-compose up -d nginx
    
    # Give Nginx time to start
    sleep 5
    
    # Run Certbot to get certificates using webroot mode
    echo -e "${YELLOW}Obtaining Let's Encrypt certificates for $DOMAIN...${NC}"
    docker run --rm --name temp-certbot \
      -v "$PWD/certbot:/etc/letsencrypt" \
      -v "$PWD/certbot-webroot:/var/www/certbot" \
      --network host \
      certbot/certbot certonly --webroot \
      --webroot-path=/var/www/certbot \
      --email "$EMAIL" \
      --agree-tos \
      --no-eff-email \
      --force-renewal \
      -d "$DOMAIN"
    
    # Check if certificates were successfully obtained
    if [ ! -d "./certbot/live/$DOMAIN" ]; then
      echo -e "${RED}Error: Failed to obtain certificates. Check your domain and DNS settings.${NC}"
      echo -e "${YELLOW}Continuing with deployment using self-signed certificates...${NC}"
    else
      echo -e "${GREEN}Successfully obtained Let's Encrypt certificates!${NC}"
      
      # Copy certificates to the SSL directory for Nginx
      echo -e "${YELLOW}Copying certificates to SSL directory...${NC}"
      mkdir -p ./ssl
      cp "./certbot/live/$DOMAIN/fullchain.pem" ./ssl/cert.pem
      cp "./certbot/live/$DOMAIN/privkey.pem" ./ssl/key.pem
      chmod 644 ./ssl/cert.pem ./ssl/key.pem
    fi
  fi
}

# Setup SSL certificates
setup_ssl

# Deploy with Docker Compose
echo -e "${GREEN}Deploying Papier application in $ENVIRONMENT mode...${NC}"
if [ "$ENVIRONMENT" = "production" ]; then
  # Use production profile
  docker-compose down
  docker-compose build
  docker-compose up -d --profile production
else
  # Development mode
  docker-compose down
  docker-compose build
  docker-compose up -d
fi

echo -e "${GREEN}Deployment completed successfully!${NC}"

if [ "$ENVIRONMENT" = "production" ]; then
  echo -e "${GREEN}Your application is now available at https://$DOMAIN${NC}"
  echo -e "${YELLOW}Checking application status...${NC}"
  sleep 5
  curl -sI "https://$DOMAIN" | head -n 1
else
  echo -e "${GREEN}Your application is now available at https://localhost${NC}"
  echo -e "${YELLOW}Note: You may need to accept the self-signed certificate in your browser${NC}"
fi